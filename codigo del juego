import pygame
import random

# Inicializar pygame
pygame.init()

# Configuración de la pantalla
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Adivina la Operación")

# Colores naturales
WHITE = (255, 255, 255)
GREEN = (100, 100, 100)
BROWN = (150, 150, 150)
DARK_GREEN = (80, 80, 80)
RED = (120, 120, 120)

# Fuentes
font = pygame.font.Font(None, 50)
small_font = pygame.font.Font(None, 36)

# Variables de juego
score = 0
mistakes = 0
max_mistakes = 5
running = True
selected_option = None

# Generar operaciones aleatorias
def generate_problem():
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    operations = [(num1 + num2, f"{num1} + {num2}"),
                  (num1 - num2, f"{num1} - {num2}"),
                  (num1 * num2, f"{num1} * {num2}"),
                  (num1 // num2 if num2 != 0 else num1, f"{num1} / {num2}")]
    
    correct = random.choice(operations)
    options = random.sample(operations, k=4)
    if correct not in options:
        options[random.randint(0, 3)] = correct
    
    return correct[0], correct[1], [opt[1] for opt in options]

# Función para reiniciar el juego
def reset_game():
    global score, mistakes, selected_option, result, correct_operation, options
    score = 0
    mistakes = 0
    selected_option = None
    result, correct_operation, options = generate_problem()

# Generar primer problema
result, correct_operation, options = generate_problem()

while running:
    screen.fill(WHITE)
    
    # Mostrar resultado
    result_text = font.render(f"Resultado: {result}", True, DARK_GREEN)
    screen.blit(result_text, (WIDTH // 2 - result_text.get_width() // 2, HEIGHT // 4))
    
    # Mostrar opciones
    option_rects = []
    for i, option in enumerate(options):
        option_text = small_font.render(option, True, GREEN)
        rect = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 3 + i * 60, 200, 50)
        pygame.draw.rect(screen, BROWN, rect)
        screen.blit(option_text, (WIDTH // 2 - option_text.get_width() // 2, HEIGHT // 3 + i * 60 + 10))
        option_rects.append((rect, option))
    
    # Mostrar puntuación y errores
    score_text = small_font.render(f"Puntuación: {score}", True, DARK_GREEN)
    screen.blit(score_text, (10, 10))
    mistakes_text = small_font.render(f"Errores: {mistakes}/{max_mistakes}", True, RED)
    screen.blit(mistakes_text, (WIDTH - 250, 10))
    
    if mistakes >= max_mistakes:
        game_over_text = small_font.render("Te has equivocado más de 5 veces, vuelve a intentarlo", True, RED)
        screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 1.3))  # Mover abajo
        restart_button = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 1.2, 200, 50)
        pygame.draw.rect(screen, BROWN, restart_button)
        restart_text = small_font.render("Reiniciar", True, WHITE)
        screen.blit(restart_text, (WIDTH // 2 - restart_text.get_width() // 2, HEIGHT // 1.2 + 10))
        pygame.display.flip()
        waiting = True
        while waiting:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    waiting = False
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if restart_button.collidepoint(event.pos):
                        reset_game()
                        waiting = False
        continue  # Asegurarse de no continuar al siguiente ciclo hasta que se reinicie

    pygame.display.flip()
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            for rect, option in option_rects:
                if rect.collidepoint(event.pos):
                    if option == correct_operation:
                        score += 1
                    else:
                        mistakes += 1
                    result, correct_operation, options = generate_problem()

pygame.quit()
